// Common Node definition and Stack definition
class Node{
	public Object data;
	public Node next;

	public Node(Object data){
	    this.data = data;
	    next = null;
	}
}

public class Stack{
	Node top;

	public Integer pop(){
	   if(top == null)
	      return null;

	   Integer data = top.data;
	   top = top.next;
	   return data;
	}

	public void push(Integer data){
	   Node newNode = new Node(data);
	   newNode.next = top;
	   top = newNode;
	}

	public Integer peek(){
	   if(top == null)
	      return null;

	   return top.data;
	}

	public boolean isEmpty(){
	   return top == null ? true : false;
	}
}

===================================================================
3.2 Add a min function to a stack with complexity of O(1).

public class Stack2 extends Stack{
	Stack minStack;

	public Stack2(){
	   minStack = new Stack();
	}

	public void push(Integer data){
	   super.push(data);

	   // Update min value 
	   if( data <= min){
	      minStack.push(data);
	   }
	}

	public Integer pop(){
	    int data = super.pop();

	    // Update min value
	    if(data == min()){
	       minStack.pop();
	    }

	    return data;
	}

	public Integer min(){
	    if(isEmpty())
	       return Integer.MAX_VALUE;

	    return minStack2.peek();

	}
}

===================================================================
3.3 Implement a data structure SetOfStacks
public static class SetOfStacks{
	ArrayList<Stack> stacks = new ArrayList<Stack>();
	int curStackIdx = -1;
	int curStackSize = 0;
	int threshold = 10;

	public static void push(int data){
      if(stacks.size() == 0 || curStackSize == threshold){
         Stack newStack = new Stack();
	     newStack.push(data);
	     stacks.add(newStack);
	     curStackSize ++;
	     curStackIndex ++;
      }else{
         stacks.get(curStackIdx).push(data);
	     curStackSize ++;
      }
	}

	public static Integer pop(){
	   if(curStackIdx == -1)
	      return null;

	   Stack curStack = stacks.get(curStackIdx);
	   int data = curStack.pop();

	   if(curStack.isEmpty()){
	      stacks.remove(curStackIdx --);
	      if(curStackIdx < 0){
	         curStackSize = 0;
	      }else{
	         curStackSize = threshold;
	      }
	   }
	   
	   return data;
	}
}

===================================================================
3.5 Use tow stacks to implement a MyQueue
public class MyQueue{
	Stack s1;
	Stack s2;

	public MyQueue(){
	   s1 = new Stack();
	   s2 = new Stack();
	}

	public int Size(){
	   return s1.size() + s2.size();
	}

	public void enqueue(Integer data){
	   s1.push(data);
	}

	public void Integer dequeue(){
	   if(!s2.isEmpty()){
	      return s2.pop();
	   }

       if(s1.isEmpty())
          return null;

	   while(!s1.isEmpty()){
	      Integer data = s1.pop();
	      s2.push(data);
	   }

	   return s2.pop();
	}
}

===================================================================
3.6 Sort a stack in ascending order(with biggest items on top)
public static Stack sort(Stack s){
    Stack buffer = new Stack();

	while(!s.isEmpty()){
	   Integer value = s.pop();
	   while(!buffer.isEmpty() && buffer.peek() > value){
	      s.push(buffer.pop());
	   }

	   buffer.push(value);
	}

	return buffer;
}